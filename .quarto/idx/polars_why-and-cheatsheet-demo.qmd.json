{"title":"converted from jupyter","markdown":{"yaml":{"title":"converted from jupyter","output":"html_document"},"headingText":"why Polars over Pandas","containsRefs":false,"markdown":"\n\n\n`conda install polars` via Terminal\n\n\n```{python}\nimport polars as pl\nfrom datetime import datetime\nimport numpy as np\n```\n\n\n- https://www.youtube.com/watch?v=_cDLdwaUe6E\n    -  way faster computer (multicore processing)\n    -  faster to compose\n    -  for working with large datasets\n    -  lazy evaluation - delays some operations till needed\n    -  written mostly in rust (as opposed to pandas, written mostly in C++)\n    -  query optimization\n    -  list of functions that are the same between pandas and polars:  https://youtu.be/sepiszMSvBs?si=Y5oOCNdPmZW2MKLM&t=581\n    -  can work in larger than RAM context (lazy mode and eager mode)\n    -  \"came for the speed, stayed for the syntax\"\n\n## Blurb\n\nPolars is a Python* package.  This document shows a QuickStart approach for faster and more intuitive Python analytics.\n\nLearning Polars-Python is more accessible than Pandas while also fully compatible and Pythonic. Bonus: Polars is more efficient than numpy or pandas. Polars is a data frame, column style approach for working with data, especially efficient with medium and larger-than-RAM analytics.  Query optimization is built in! Explore fastest-than-pandas processing without needing, nor excluding, SQL. \n \n## difference between Pandas and Polars\n- polars does not have to index data frames\n\n\n## Polars v Pandas v DuckDB \n- Polars \n    - lightnight fast, column oriented\n    - split-apply-combine inspired grammar (i.e. group_by)\n    - lazy and eager evaluation\n    - larger than RAM\n    - No need for SQL, but does not preclude use of SQL in combination with Polars functions\n    -  data size limits: tens or even hundreds of GB\n- Pandas\n    - split-apply-combine inspired grammar (i.e. group_by)\n    - 5 - 10 GB (larger data sizes will degrade performance)\n - DuckDB \n     -  Duck DB = lightwaight OLAP database (larger than RAM data processing)\n     -  columnar data analysis\n     -  SQL driven\n     -  Theoretical size limit is in the petabyte range.   Can handle data that are orders of magnitude larger than either Polars or Pandas\n    \n\n```{python}\nprint(\"now now\")\n```     \n\n```{python}\ndf_brodhead = pl.read_csv(\"data/brodhead_center.csv\")\nprint(df_brodhead.head())\n```\n\n```{python}\nprint(\"now hi\")\n```\n\n```{python}\nfoo = df_brodhead.filter(\n    pl.col(\"menuType\") == \"appetizer\",\n    pl.col(\"itemType\") == \"snack\"\n).select(\n    pl.col(\"name\", \"cost\")\n)\n\nprint(foo)\n```\n\nfrom: https://realpython.com/polars-python/\n\n```{python}\nnum_rows = 5000\nrng = np.random.default_rng(seed=7)\n\nbuildings_data = {\n      \"sqft\": rng.exponential(scale=1000, size=num_rows),\n      \"year\": rng.integers(low=1995, high=2023, size=num_rows),\n      \"building_type\": rng.choice([\"A\", \"B\", \"C\"], size=num_rows),\n}\nbuildings = pl.DataFrame(buildings_data)\nbuildings\n```\n\n```{python}\nbuildings.schema\n```\n\n```{python}\ndf_brodhead.schema\n```\n\n---\n\n```{python}\n#import numpy as np\n#import polars as pl\nnum_rows = 5000\nrng = np.random.default_rng(seed=7)\nbuildings_data = {\n     \"sqft\": rng.exponential(scale=1000, size=num_rows),\n     \"year\": rng.integers(low=1995, high=2023, size=num_rows),\n     \"building_type\": rng.choice([\"A\", \"B\", \"C\"], size=num_rows),\n }\nbuildings = pl.DataFrame(buildings_data)\n```\n\n```{python}\nbuildings\n```\n\n```{python}\ndf_brodhead\n```\n\n```{python}\ndf_brodhead.columns\n```\n\n```{python}\ndf_brodhead.select(pl.col(['type', 'itemType']))\n```\n\n```{python}\ndf_brodhead.with_columns(\n    (pl.col('cost') + pl.col('rating')).alias(\"sum\"),\n    (pl.col('cost') * 2).alias(\"double_cost\")\n).filter(\n    pl.col('itemType') == \"snack\",\n    pl.col('double_cost') >= 14\n)\n```\n\n```{python}\n# group_by\n# count is now len\n\ndf_brodhead.group_by(\"itemType\").len().sort('len', descending=True)\n```\n\nNeed to read more about aggregation:  https://docs.pola.rs/user-guide/concepts/contexts/#group-by-aggregation\n\n```{python}\n#df.join(df2, on=\"id\")\n```\n\n```{python}\n#pl.concat([df1, df2], how=\"vertical)\n```\n\n## Aggregation\n\nhttps://docs.pola.rs/user-guide/expressions/aggregation/\n\n\n```{python}\nurl = \"https://theunitedstates.io/congress-legislators/legislators-historical.csv\"\n\ndtypes = {\n    \"first_name\": pl.Categorical,\n    \"gender\": pl.Categorical,\n    \"type\": pl.Categorical,\n    \"state\": pl.Categorical,\n    \"party\": pl.Categorical,\n}\n\ndataset = pl.read_csv(url, dtypes=dtypes).with_columns(\n    pl.col(\"birthday\").str.to_date(strict=False)\n)\n\ndataset\n```\n\n```{python}\nmarg_df = dataset.filter(\n    pl.col(\"last_name\") == \"Smith\",\n    pl.col(\"gender\") == \"F\"\n)\nmarg_df\n```\n\n```{python}\nq = (\n    dataset.lazy()\n    .filter(pl.col(\"gender\") == \"F\")\n    .group_by(\"last_name\")\n    .agg(\n        pl.len(),\n        pl.col(\"gender\"),\n        pl.last(\"gender\").alias(\"foo\"),\n        pl.last(\"first_name\"),\n    )\n    .sort(\"len\", descending=True)\n    .limit(5)\n)\n\ndf_agg = q.collect()\nprint(df_agg)\n```\n\n## Unique\n\n```{python}\ndf_brodhead.select(\n    pl.col(\n    \"name\", \"type\")\n).unique(subset=[\"name\"])\n```\n\n```{python}\ndf_brodhead.glimpse()\n```\n\n## Tips and Tricks\n\nhttps://www.youtube.com/watch?v=39jB8nJBrCI\n\n\n```{python}\ndf_brodhead.select(\n    pl.col([\"name\", \"type\", \"itemName\", \"cost\"])\n    ).sort(\n    by=\"cost\", descending=True\n    ).filter(\n        pl.col(\"cost\") < 3\n    )\n```\n\n\n```{python}\n\ndf_brodhead.filter(\n    pl.col(\"cost\") == df_brodhead.select(pl.col(\"cost\")).min()\n).select(\n    pl.col([\"name\", \"itemName\", \"cost\"])\n)\n\n```\n\nWhich resturant has the most expensive items\n\n```{python}\ndf_brodhead.filter(\n    pl.col(\"cost\") == df_brodhead.select(pl.col(\"cost\")).max()\n).select(pl.col(\n    [\"name\", \"itemName\", \"cost\"]\n))\n```\n\n\nAt the Brodhead Center, how many of the entrees (found in the menuType variable) cost eight dollars?\n\n\n```{python}\ndf_brodhead.filter(\n    pl.col(\"menuType\") == \"entree\",\n    pl.col(\"cost\") == 8\n).sort(\"rating\", descending=True)\n```\n\n\nThe head of Duke dining is considering reducing prices at the Brodhead Center. Using what weâ€™ve learned in class, write code that will calculate a new variable (halfPrice) that contains items at half price.\n\n\n```{python}\ndf_brodhead.with_columns(\n    (pl.col(\"cost\") * 0.5).alias(\"half_price\")\n)\n```\n\nwith the above code chunk, cast half_price as an integer\n\n\n```{python}\ndf_brodhead.with_columns(\n    (pl.col(\"cost\") * 0.5).alias(\"half_price\").cast(pl.Int64)\n).head(4)\n```\n\nHow many entrees are in the dataset (menuType variable)? How many desserts\n\n```{python}\ndf_brodhead['menuType'].value_counts().sort(\"count\", descending=True)\n```\n\n\n```{python}\ndf_brodhead.groupby(\n    ['menuType', 'itemType']\n    ).agg(\n        pl.count()\n    ).sort(\"count\", descending = True).head(8)\n```\n\n```{python}\ndf_brodhead.groupby(\n    ['menuType', 'itemType']\n    ).agg(\n        pl.count()\n    ).sort([\"menuType\", \"itemType\"]).head(8)\n```\n\n```{python}\n# brodhead |>  group_by(name) |> summarize(mean(cost), mean(rating))\n\ndf_brodhead.groupby(\"name\",\"menuType\").agg([\n        pl.col(\"cost\").mean().round(1).alias(\"mean_cost\"),\n        pl.col(\"rating\").mean().round(1).alias(\"mean_rating\")\n    ]).sort(\"mean_cost\", descending=True)\n```\n\n## datasets\n\n\n```{python}\nfrom vega_datasets import data\n```\n\n\n```{python}\niris_df = data.iris()\niris_df.head()\n```\n\n```{python}\ndata.cars()\ncars_df = data.cars()\npl.from_pandas(cars_df).head()\n```\n\n```{python}\ndata.list_datasets()\n```\n\n","srcMarkdownNoYaml":"\n\n\n`conda install polars` via Terminal\n\n\n```{python}\nimport polars as pl\nfrom datetime import datetime\nimport numpy as np\n```\n\n## why Polars over Pandas\n\n- https://www.youtube.com/watch?v=_cDLdwaUe6E\n    -  way faster computer (multicore processing)\n    -  faster to compose\n    -  for working with large datasets\n    -  lazy evaluation - delays some operations till needed\n    -  written mostly in rust (as opposed to pandas, written mostly in C++)\n    -  query optimization\n    -  list of functions that are the same between pandas and polars:  https://youtu.be/sepiszMSvBs?si=Y5oOCNdPmZW2MKLM&t=581\n    -  can work in larger than RAM context (lazy mode and eager mode)\n    -  \"came for the speed, stayed for the syntax\"\n\n## Blurb\n\nPolars is a Python* package.  This document shows a QuickStart approach for faster and more intuitive Python analytics.\n\nLearning Polars-Python is more accessible than Pandas while also fully compatible and Pythonic. Bonus: Polars is more efficient than numpy or pandas. Polars is a data frame, column style approach for working with data, especially efficient with medium and larger-than-RAM analytics.  Query optimization is built in! Explore fastest-than-pandas processing without needing, nor excluding, SQL. \n \n## difference between Pandas and Polars\n- polars does not have to index data frames\n\n\n## Polars v Pandas v DuckDB \n- Polars \n    - lightnight fast, column oriented\n    - split-apply-combine inspired grammar (i.e. group_by)\n    - lazy and eager evaluation\n    - larger than RAM\n    - No need for SQL, but does not preclude use of SQL in combination with Polars functions\n    -  data size limits: tens or even hundreds of GB\n- Pandas\n    - split-apply-combine inspired grammar (i.e. group_by)\n    - 5 - 10 GB (larger data sizes will degrade performance)\n - DuckDB \n     -  Duck DB = lightwaight OLAP database (larger than RAM data processing)\n     -  columnar data analysis\n     -  SQL driven\n     -  Theoretical size limit is in the petabyte range.   Can handle data that are orders of magnitude larger than either Polars or Pandas\n    \n\n```{python}\nprint(\"now now\")\n```     \n\n```{python}\ndf_brodhead = pl.read_csv(\"data/brodhead_center.csv\")\nprint(df_brodhead.head())\n```\n\n```{python}\nprint(\"now hi\")\n```\n\n```{python}\nfoo = df_brodhead.filter(\n    pl.col(\"menuType\") == \"appetizer\",\n    pl.col(\"itemType\") == \"snack\"\n).select(\n    pl.col(\"name\", \"cost\")\n)\n\nprint(foo)\n```\n\nfrom: https://realpython.com/polars-python/\n\n```{python}\nnum_rows = 5000\nrng = np.random.default_rng(seed=7)\n\nbuildings_data = {\n      \"sqft\": rng.exponential(scale=1000, size=num_rows),\n      \"year\": rng.integers(low=1995, high=2023, size=num_rows),\n      \"building_type\": rng.choice([\"A\", \"B\", \"C\"], size=num_rows),\n}\nbuildings = pl.DataFrame(buildings_data)\nbuildings\n```\n\n```{python}\nbuildings.schema\n```\n\n```{python}\ndf_brodhead.schema\n```\n\n---\n\n```{python}\n#import numpy as np\n#import polars as pl\nnum_rows = 5000\nrng = np.random.default_rng(seed=7)\nbuildings_data = {\n     \"sqft\": rng.exponential(scale=1000, size=num_rows),\n     \"year\": rng.integers(low=1995, high=2023, size=num_rows),\n     \"building_type\": rng.choice([\"A\", \"B\", \"C\"], size=num_rows),\n }\nbuildings = pl.DataFrame(buildings_data)\n```\n\n```{python}\nbuildings\n```\n\n```{python}\ndf_brodhead\n```\n\n```{python}\ndf_brodhead.columns\n```\n\n```{python}\ndf_brodhead.select(pl.col(['type', 'itemType']))\n```\n\n```{python}\ndf_brodhead.with_columns(\n    (pl.col('cost') + pl.col('rating')).alias(\"sum\"),\n    (pl.col('cost') * 2).alias(\"double_cost\")\n).filter(\n    pl.col('itemType') == \"snack\",\n    pl.col('double_cost') >= 14\n)\n```\n\n```{python}\n# group_by\n# count is now len\n\ndf_brodhead.group_by(\"itemType\").len().sort('len', descending=True)\n```\n\nNeed to read more about aggregation:  https://docs.pola.rs/user-guide/concepts/contexts/#group-by-aggregation\n\n```{python}\n#df.join(df2, on=\"id\")\n```\n\n```{python}\n#pl.concat([df1, df2], how=\"vertical)\n```\n\n## Aggregation\n\nhttps://docs.pola.rs/user-guide/expressions/aggregation/\n\n\n```{python}\nurl = \"https://theunitedstates.io/congress-legislators/legislators-historical.csv\"\n\ndtypes = {\n    \"first_name\": pl.Categorical,\n    \"gender\": pl.Categorical,\n    \"type\": pl.Categorical,\n    \"state\": pl.Categorical,\n    \"party\": pl.Categorical,\n}\n\ndataset = pl.read_csv(url, dtypes=dtypes).with_columns(\n    pl.col(\"birthday\").str.to_date(strict=False)\n)\n\ndataset\n```\n\n```{python}\nmarg_df = dataset.filter(\n    pl.col(\"last_name\") == \"Smith\",\n    pl.col(\"gender\") == \"F\"\n)\nmarg_df\n```\n\n```{python}\nq = (\n    dataset.lazy()\n    .filter(pl.col(\"gender\") == \"F\")\n    .group_by(\"last_name\")\n    .agg(\n        pl.len(),\n        pl.col(\"gender\"),\n        pl.last(\"gender\").alias(\"foo\"),\n        pl.last(\"first_name\"),\n    )\n    .sort(\"len\", descending=True)\n    .limit(5)\n)\n\ndf_agg = q.collect()\nprint(df_agg)\n```\n\n## Unique\n\n```{python}\ndf_brodhead.select(\n    pl.col(\n    \"name\", \"type\")\n).unique(subset=[\"name\"])\n```\n\n```{python}\ndf_brodhead.glimpse()\n```\n\n## Tips and Tricks\n\nhttps://www.youtube.com/watch?v=39jB8nJBrCI\n\n\n```{python}\ndf_brodhead.select(\n    pl.col([\"name\", \"type\", \"itemName\", \"cost\"])\n    ).sort(\n    by=\"cost\", descending=True\n    ).filter(\n        pl.col(\"cost\") < 3\n    )\n```\n\n\n```{python}\n\ndf_brodhead.filter(\n    pl.col(\"cost\") == df_brodhead.select(pl.col(\"cost\")).min()\n).select(\n    pl.col([\"name\", \"itemName\", \"cost\"])\n)\n\n```\n\nWhich resturant has the most expensive items\n\n```{python}\ndf_brodhead.filter(\n    pl.col(\"cost\") == df_brodhead.select(pl.col(\"cost\")).max()\n).select(pl.col(\n    [\"name\", \"itemName\", \"cost\"]\n))\n```\n\n\nAt the Brodhead Center, how many of the entrees (found in the menuType variable) cost eight dollars?\n\n\n```{python}\ndf_brodhead.filter(\n    pl.col(\"menuType\") == \"entree\",\n    pl.col(\"cost\") == 8\n).sort(\"rating\", descending=True)\n```\n\n\nThe head of Duke dining is considering reducing prices at the Brodhead Center. Using what weâ€™ve learned in class, write code that will calculate a new variable (halfPrice) that contains items at half price.\n\n\n```{python}\ndf_brodhead.with_columns(\n    (pl.col(\"cost\") * 0.5).alias(\"half_price\")\n)\n```\n\nwith the above code chunk, cast half_price as an integer\n\n\n```{python}\ndf_brodhead.with_columns(\n    (pl.col(\"cost\") * 0.5).alias(\"half_price\").cast(pl.Int64)\n).head(4)\n```\n\nHow many entrees are in the dataset (menuType variable)? How many desserts\n\n```{python}\ndf_brodhead['menuType'].value_counts().sort(\"count\", descending=True)\n```\n\n\n```{python}\ndf_brodhead.groupby(\n    ['menuType', 'itemType']\n    ).agg(\n        pl.count()\n    ).sort(\"count\", descending = True).head(8)\n```\n\n```{python}\ndf_brodhead.groupby(\n    ['menuType', 'itemType']\n    ).agg(\n        pl.count()\n    ).sort([\"menuType\", \"itemType\"]).head(8)\n```\n\n```{python}\n# brodhead |>  group_by(name) |> summarize(mean(cost), mean(rating))\n\ndf_brodhead.groupby(\"name\",\"menuType\").agg([\n        pl.col(\"cost\").mean().round(1).alias(\"mean_cost\"),\n        pl.col(\"rating\").mean().round(1).alias(\"mean_rating\")\n    ]).sort(\"mean_cost\", descending=True)\n```\n\n## datasets\n\n\n```{python}\nfrom vega_datasets import data\n```\n\n\n```{python}\niris_df = data.iris()\niris_df.head()\n```\n\n```{python}\ndata.cars()\ncars_df = data.cars()\npl.from_pandas(cars_df).head()\n```\n\n```{python}\ndata.list_datasets()\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":"html_document","warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"polars_why-and-cheatsheet-demo.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.549","title":"converted from jupyter"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":[]}