{
  "hash": "63af97da2e30c74f7e9f8f59069c56af",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"converted from jupyter\"\noutput: html_document\n---\n\n`conda install polars` via Terminal\n\n::: {#a8804c31 .cell execution_count=1}\n``` {.python .cell-code}\nimport polars as pl\nfrom datetime import datetime\nimport numpy as np\n```\n:::\n\n\n## why Polars over Pandas\n\n- https://www.youtube.com/watch?v=_cDLdwaUe6E\n    -  way faster computer (multicore processing)\n    -  faster to compose\n    -  for working with large datasets\n    -  lazy evaluation - delays some operations till needed\n    -  written mostly in rust (as opposed to pandas, written mostly in C++)\n    -  query optimization\n    -  list of functions that are the same between pandas and polars:  https://youtu.be/sepiszMSvBs?si=Y5oOCNdPmZW2MKLM&t=581\n    -  can work in larger than RAM context (lazy mode and eager mode)\n    -  \"came for the speed, stayed for the syntax\"\n \n## difference between Pandas and Polars\n- polars does not have to index data frames\n\n\n## DuckDB v Pandas v Polars\n - DuckDB vs Pandas vs Polars For Python devs\n     -  Duck DB = lightwaight OLAP database (larger than RAM data processing)\n     -  columnar data analysis\n     -  SQL driven\n\n::: {#9b8794e3 .cell execution_count=2}\n``` {.python .cell-code}\nprint(\"now now\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnow now\n```\n:::\n:::\n\n\n::: {#f4b2245a .cell execution_count=3}\n``` {.python .cell-code}\ndf_brodhead = pl.read_csv(\"data/brodhead_center.csv\")\nprint(df_brodhead.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (5, 7)\n┌───────────────────┬───────────────┬───────────┬──────────┬───────────────────────┬──────┬────────┐\n│ name              ┆ type          ┆ menuType  ┆ itemType ┆ itemName              ┆ cost ┆ rating │\n│ ---               ┆ ---           ┆ ---       ┆ ---      ┆ ---                   ┆ ---  ┆ ---    │\n│ str               ┆ str           ┆ str       ┆ str      ┆ str                   ┆ i64  ┆ i64    │\n╞═══════════════════╪═══════════════╪═══════════╪══════════╪═══════════════════════╪══════╪════════╡\n│ Devils Krafthouse ┆ bar and grill ┆ appetizer ┆ snack    ┆ sweet potato tots     ┆ 4    ┆ 8      │\n│ Devils Krafthouse ┆ bar and grill ┆ appetizer ┆ snack    ┆ french fries          ┆ 4    ┆ 10     │\n│ Devils Krafthouse ┆ bar and grill ┆ appetizer ┆ snack    ┆ quesadillas           ┆ 6    ┆ 5      │\n│ Devils Krafthouse ┆ bar and grill ┆ appetizer ┆ snack    ┆ southwest chili wings ┆ 8    ┆ 6      │\n│ Devils Krafthouse ┆ bar and grill ┆ appetizer ┆ snack    ┆ chicken tenders       ┆ 7    ┆ 7      │\n└───────────────────┴───────────────┴───────────┴──────────┴───────────────────────┴──────┴────────┘\n```\n:::\n:::\n\n\n::: {#070c2f1f .cell execution_count=4}\n``` {.python .cell-code}\nprint(\"now hi\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnow hi\n```\n:::\n:::\n\n\n::: {#bd3c59a8 .cell execution_count=5}\n``` {.python .cell-code}\nfoo = df_brodhead.filter(\n    pl.col(\"menuType\") == \"appetizer\",\n    pl.col(\"itemType\") == \"snack\"\n).select(\n    pl.col(\"name\", \"cost\")\n)\n\nprint(foo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (8, 2)\n┌───────────────────┬──────┐\n│ name              ┆ cost │\n│ ---               ┆ ---  │\n│ str               ┆ i64  │\n╞═══════════════════╪══════╡\n│ Devils Krafthouse ┆ 4    │\n│ Devils Krafthouse ┆ 4    │\n│ Devils Krafthouse ┆ 6    │\n│ Devils Krafthouse ┆ 8    │\n│ Devils Krafthouse ┆ 7    │\n│ Devils Krafthouse ┆ 8    │\n│ Devils Krafthouse ┆ 9    │\n│ Devils Krafthouse ┆ 4    │\n└───────────────────┴──────┘\n```\n:::\n:::\n\n\nfrom: https://realpython.com/polars-python/\n\n::: {#f812273e .cell execution_count=6}\n``` {.python .cell-code}\nnum_rows = 5000\nrng = np.random.default_rng(seed=7)\n\nbuildings_data = {\n      \"sqft\": rng.exponential(scale=1000, size=num_rows),\n      \"year\": rng.integers(low=1995, high=2023, size=num_rows),\n      \"building_type\": rng.choice([\"A\", \"B\", \"C\"], size=num_rows),\n}\nbuildings = pl.DataFrame(buildings_data)\nbuildings\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5_000, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>sqft</th><th>year</th><th>building_type</th></tr><tr><td>f64</td><td>i64</td><td>str</td></tr></thead><tbody><tr><td>707.529256</td><td>1996</td><td>&quot;C&quot;</td></tr><tr><td>1025.203348</td><td>2020</td><td>&quot;C&quot;</td></tr><tr><td>568.548657</td><td>2012</td><td>&quot;A&quot;</td></tr><tr><td>895.109864</td><td>2000</td><td>&quot;A&quot;</td></tr><tr><td>206.532754</td><td>2011</td><td>&quot;A&quot;</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>710.435755</td><td>2003</td><td>&quot;C&quot;</td></tr><tr><td>408.872783</td><td>2009</td><td>&quot;C&quot;</td></tr><tr><td>57.562059</td><td>2019</td><td>&quot;C&quot;</td></tr><tr><td>3728.088949</td><td>2020</td><td>&quot;C&quot;</td></tr><tr><td>686.678345</td><td>2011</td><td>&quot;C&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#91e5efef .cell execution_count=7}\n``` {.python .cell-code}\nbuildings.schema\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nOrderedDict([('sqft', Float64), ('year', Int64), ('building_type', String)])\n```\n:::\n:::\n\n\n::: {#791c6a90 .cell execution_count=8}\n``` {.python .cell-code}\ndf_brodhead.schema\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nOrderedDict([('name', String),\n             ('type', String),\n             ('menuType', String),\n             ('itemType', String),\n             ('itemName', String),\n             ('cost', Int64),\n             ('rating', Int64)])\n```\n:::\n:::\n\n\n---\n\n::: {#9643ff9d .cell execution_count=9}\n``` {.python .cell-code}\n#import numpy as np\n#import polars as pl\nnum_rows = 5000\nrng = np.random.default_rng(seed=7)\nbuildings_data = {\n     \"sqft\": rng.exponential(scale=1000, size=num_rows),\n     \"year\": rng.integers(low=1995, high=2023, size=num_rows),\n     \"building_type\": rng.choice([\"A\", \"B\", \"C\"], size=num_rows),\n }\nbuildings = pl.DataFrame(buildings_data)\n```\n:::\n\n\n::: {#54c20ba3 .cell execution_count=10}\n``` {.python .cell-code}\nbuildings\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5_000, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>sqft</th><th>year</th><th>building_type</th></tr><tr><td>f64</td><td>i64</td><td>str</td></tr></thead><tbody><tr><td>707.529256</td><td>1996</td><td>&quot;C&quot;</td></tr><tr><td>1025.203348</td><td>2020</td><td>&quot;C&quot;</td></tr><tr><td>568.548657</td><td>2012</td><td>&quot;A&quot;</td></tr><tr><td>895.109864</td><td>2000</td><td>&quot;A&quot;</td></tr><tr><td>206.532754</td><td>2011</td><td>&quot;A&quot;</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>710.435755</td><td>2003</td><td>&quot;C&quot;</td></tr><tr><td>408.872783</td><td>2009</td><td>&quot;C&quot;</td></tr><tr><td>57.562059</td><td>2019</td><td>&quot;C&quot;</td></tr><tr><td>3728.088949</td><td>2020</td><td>&quot;C&quot;</td></tr><tr><td>686.678345</td><td>2011</td><td>&quot;C&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#f6adb690 .cell execution_count=11}\n``` {.python .cell-code}\ndf_brodhead\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (59, 7)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>type</th><th>menuType</th><th>itemType</th><th>itemName</th><th>cost</th><th>rating</th></tr><tr><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;bar and grill&quot;</td><td>&quot;appetizer&quot;</td><td>&quot;snack&quot;</td><td>&quot;sweet potato tots&quot;</td><td>4</td><td>8</td></tr><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;bar and grill&quot;</td><td>&quot;appetizer&quot;</td><td>&quot;snack&quot;</td><td>&quot;french fries&quot;</td><td>4</td><td>10</td></tr><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;bar and grill&quot;</td><td>&quot;appetizer&quot;</td><td>&quot;snack&quot;</td><td>&quot;quesadillas&quot;</td><td>6</td><td>5</td></tr><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;bar and grill&quot;</td><td>&quot;appetizer&quot;</td><td>&quot;snack&quot;</td><td>&quot;southwest chili wings&quot;</td><td>8</td><td>6</td></tr><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;bar and grill&quot;</td><td>&quot;appetizer&quot;</td><td>&quot;snack&quot;</td><td>&quot;chicken tenders&quot;</td><td>7</td><td>7</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Cafe&quot;</td><td>&quot;cafe&quot;</td><td>&quot;entree&quot;</td><td>&quot;sandwich&quot;</td><td>&quot;apple and brie crepe&quot;</td><td>7</td><td>9</td></tr><tr><td>&quot;Cafe&quot;</td><td>&quot;cafe&quot;</td><td>&quot;dessert&quot;</td><td>&quot;dessert&quot;</td><td>&quot;cinnamon sugar&quot;</td><td>5</td><td>9</td></tr><tr><td>&quot;Cafe&quot;</td><td>&quot;cafe&quot;</td><td>&quot;dessert&quot;</td><td>&quot;dessert&quot;</td><td>&quot;nutella&quot;</td><td>6</td><td>8</td></tr><tr><td>&quot;Cafe&quot;</td><td>&quot;cafe&quot;</td><td>&quot;dessert&quot;</td><td>&quot;dessert&quot;</td><td>&quot;banana foster&quot;</td><td>6</td><td>7</td></tr><tr><td>&quot;Cafe&quot;</td><td>&quot;cafe&quot;</td><td>&quot;dessert&quot;</td><td>&quot;dessert&quot;</td><td>&quot;crepe suzette&quot;</td><td>6</td><td>8</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#9ffb4ad5 .cell execution_count=12}\n``` {.python .cell-code}\ndf_brodhead.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n['name', 'type', 'menuType', 'itemType', 'itemName', 'cost', 'rating']\n```\n:::\n:::\n\n\n::: {#9982d09f .cell execution_count=13}\n``` {.python .cell-code}\ndf_brodhead.select(pl.col(['type', 'itemType']))\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (59, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>type</th><th>itemType</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;bar and grill&quot;</td><td>&quot;snack&quot;</td></tr><tr><td>&quot;bar and grill&quot;</td><td>&quot;snack&quot;</td></tr><tr><td>&quot;bar and grill&quot;</td><td>&quot;snack&quot;</td></tr><tr><td>&quot;bar and grill&quot;</td><td>&quot;snack&quot;</td></tr><tr><td>&quot;bar and grill&quot;</td><td>&quot;snack&quot;</td></tr><tr><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;cafe&quot;</td><td>&quot;sandwich&quot;</td></tr><tr><td>&quot;cafe&quot;</td><td>&quot;dessert&quot;</td></tr><tr><td>&quot;cafe&quot;</td><td>&quot;dessert&quot;</td></tr><tr><td>&quot;cafe&quot;</td><td>&quot;dessert&quot;</td></tr><tr><td>&quot;cafe&quot;</td><td>&quot;dessert&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#94bd5578 .cell execution_count=14}\n``` {.python .cell-code}\ndf_brodhead.with_columns(\n    (pl.col('cost') + pl.col('rating')).alias(\"sum\"),\n    (pl.col('cost') * 2).alias(\"double_cost\")\n).filter(\n    pl.col('itemType') == \"snack\",\n    pl.col('double_cost') >= 14\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (4, 9)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>type</th><th>menuType</th><th>itemType</th><th>itemName</th><th>cost</th><th>rating</th><th>sum</th><th>double_cost</th></tr><tr><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;bar and grill&quot;</td><td>&quot;appetizer&quot;</td><td>&quot;snack&quot;</td><td>&quot;southwest chili wings&quot;</td><td>8</td><td>6</td><td>14</td><td>16</td></tr><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;bar and grill&quot;</td><td>&quot;appetizer&quot;</td><td>&quot;snack&quot;</td><td>&quot;chicken tenders&quot;</td><td>7</td><td>7</td><td>14</td><td>14</td></tr><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;bar and grill&quot;</td><td>&quot;appetizer&quot;</td><td>&quot;snack&quot;</td><td>&quot;nachos&quot;</td><td>8</td><td>8</td><td>16</td><td>16</td></tr><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;bar and grill&quot;</td><td>&quot;appetizer&quot;</td><td>&quot;snack&quot;</td><td>&quot;peel and eat shrimp&quot;</td><td>9</td><td>5</td><td>14</td><td>18</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#88eb7d9b .cell execution_count=15}\n``` {.python .cell-code}\n# group_by\n# count is now len\n\ndf_brodhead.group_by(\"itemType\").len().sort('len', descending=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (14, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>itemType</th><th>len</th></tr><tr><td>str</td><td>u32</td></tr></thead><tbody><tr><td>&quot;appetizer&quot;</td><td>9</td></tr><tr><td>&quot;snack&quot;</td><td>8</td></tr><tr><td>&quot;sandwich&quot;</td><td>8</td></tr><tr><td>&quot;dessert&quot;</td><td>7</td></tr><tr><td>&quot;bread&quot;</td><td>6</td></tr><tr><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;soup&quot;</td><td>2</td></tr><tr><td>&quot;shrimp&quot;</td><td>1</td></tr><tr><td>&quot;beef&quot;</td><td>1</td></tr><tr><td>&quot;lamb&quot;</td><td>1</td></tr><tr><td>&quot;chicken&quot;</td><td>1</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nNeed to read more about aggregation:  https://docs.pola.rs/user-guide/concepts/contexts/#group-by-aggregation\n\n::: {#86ad961f .cell execution_count=16}\n``` {.python .cell-code}\n#df.join(df2, on=\"id\")\n```\n:::\n\n\n::: {#24c9002e .cell execution_count=17}\n``` {.python .cell-code}\n#pl.concat([df1, df2], how=\"vertical)\n```\n:::\n\n\n## Aggregation\n\nhttps://docs.pola.rs/user-guide/expressions/aggregation/\n\n::: {#8a1ed162 .cell execution_count=18}\n``` {.python .cell-code}\nurl = \"https://theunitedstates.io/congress-legislators/legislators-historical.csv\"\n\ndtypes = {\n    \"first_name\": pl.Categorical,\n    \"gender\": pl.Categorical,\n    \"type\": pl.Categorical,\n    \"state\": pl.Categorical,\n    \"party\": pl.Categorical,\n}\n\ndataset = pl.read_csv(url, dtypes=dtypes).with_columns(\n    pl.col(\"birthday\").str.to_date(strict=False)\n)\n\ndataset\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (12_145, 36)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>last_name</th><th>first_name</th><th>middle_name</th><th>suffix</th><th>nickname</th><th>full_name</th><th>birthday</th><th>gender</th><th>type</th><th>state</th><th>district</th><th>senate_class</th><th>party</th><th>url</th><th>address</th><th>phone</th><th>contact_form</th><th>rss_url</th><th>twitter</th><th>twitter_id</th><th>facebook</th><th>youtube</th><th>youtube_id</th><th>mastodon</th><th>bioguide_id</th><th>thomas_id</th><th>opensecrets_id</th><th>lis_id</th><th>fec_ids</th><th>cspan_id</th><th>govtrack_id</th><th>votesmart_id</th><th>ballotpedia_id</th><th>washington_post_id</th><th>icpsr_id</th><th>wikipedia_id</th></tr><tr><td>str</td><td>cat</td><td>str</td><td>str</td><td>str</td><td>str</td><td>date</td><td>cat</td><td>cat</td><td>cat</td><td>i64</td><td>i64</td><td>cat</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>i64</td><td>str</td><td>str</td><td>str</td><td>i64</td><td>str</td></tr></thead><tbody><tr><td>&quot;Bassett&quot;</td><td>&quot;Richard&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>1745-04-02</td><td>&quot;M&quot;</td><td>&quot;sen&quot;</td><td>&quot;DE&quot;</td><td>null</td><td>2</td><td>&quot;Anti-Administration&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>&quot;B000226&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>401222</td><td>null</td><td>null</td><td>null</td><td>507</td><td>&quot;Richard Bassett (Delaware poli…</td></tr><tr><td>&quot;Bland&quot;</td><td>&quot;Theodorick&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>1742-03-21</td><td>&quot;M&quot;</td><td>&quot;rep&quot;</td><td>&quot;VA&quot;</td><td>9</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>&quot;B000546&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>401521</td><td>null</td><td>null</td><td>null</td><td>786</td><td>&quot;Theodorick Bland (congressman)&quot;</td></tr><tr><td>&quot;Burke&quot;</td><td>&quot;Aedanus&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>1743-06-16</td><td>&quot;M&quot;</td><td>&quot;rep&quot;</td><td>&quot;SC&quot;</td><td>2</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>&quot;B001086&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>402032</td><td>null</td><td>null</td><td>null</td><td>1260</td><td>&quot;Aedanus Burke&quot;</td></tr><tr><td>&quot;Carroll&quot;</td><td>&quot;Daniel&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>1730-07-22</td><td>&quot;M&quot;</td><td>&quot;rep&quot;</td><td>&quot;MD&quot;</td><td>6</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>&quot;C000187&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>402334</td><td>null</td><td>null</td><td>null</td><td>1538</td><td>&quot;Daniel Carroll&quot;</td></tr><tr><td>&quot;Clymer&quot;</td><td>&quot;George&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>1739-03-16</td><td>&quot;M&quot;</td><td>&quot;rep&quot;</td><td>&quot;PA&quot;</td><td>-1</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>&quot;C000538&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>402671</td><td>null</td><td>null</td><td>null</td><td>1859</td><td>&quot;George Clymer&quot;</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Johnson&quot;</td><td>&quot;Bill&quot;</td><td>null</td><td>null</td><td>null</td><td>&quot;Bill Johnson&quot;</td><td>1954-11-10</td><td>&quot;M&quot;</td><td>&quot;rep&quot;</td><td>&quot;OH&quot;</td><td>6</td><td>null</td><td>&quot;Republican&quot;</td><td>&quot;https://billjohnson.house.gov&quot;</td><td>&quot;2082 Rayburn House Office Buil…</td><td>&quot;202-225-5705&quot;</td><td>null</td><td>&quot;http://billjohnson.house.gov/c…</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>&quot;J000292&quot;</td><td>&quot;02046&quot;</td><td>&quot;N00032088&quot;</td><td>null</td><td>&quot;H0OH06189&quot;</td><td>&quot;623472&quot;</td><td>412460</td><td>&quot;120649&quot;</td><td>&quot;Bill Johnson (Ohio)&quot;</td><td>null</td><td>21162</td><td>&quot;Bill Johnson (Ohio politician)&quot;</td></tr><tr><td>&quot;Higgins&quot;</td><td>&quot;Brian&quot;</td><td>&quot;M.&quot;</td><td>null</td><td>null</td><td>&quot;Brian Higgins&quot;</td><td>1959-10-06</td><td>&quot;M&quot;</td><td>&quot;rep&quot;</td><td>&quot;NY&quot;</td><td>26</td><td>null</td><td>&quot;Democrat&quot;</td><td>&quot;https://higgins.house.gov&quot;</td><td>&quot;2269 Rayburn House Office Buil…</td><td>&quot;202-225-3306&quot;</td><td>null</td><td>&quot;http://higgins.house.gov/rss.x…</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>&quot;H001038&quot;</td><td>&quot;01794&quot;</td><td>&quot;N00027060&quot;</td><td>null</td><td>&quot;H4NY27076&quot;</td><td>&quot;1013050&quot;</td><td>400641</td><td>&quot;23127&quot;</td><td>&quot;Brian Higgins&quot;</td><td>null</td><td>20519</td><td>&quot;Brian Higgins&quot;</td></tr><tr><td>&quot;Payne&quot;</td><td>&quot;Donald&quot;</td><td>&quot;M.&quot;</td><td>&quot;Jr.&quot;</td><td>null</td><td>&quot;Donald M. Payne, Jr.&quot;</td><td>1958-12-17</td><td>&quot;M&quot;</td><td>&quot;rep&quot;</td><td>&quot;NJ&quot;</td><td>10</td><td>null</td><td>&quot;Democrat&quot;</td><td>&quot;https://payne.house.gov&quot;</td><td>&quot;106 Cannon House Office Buildi…</td><td>&quot;202-225-3436&quot;</td><td>null</td><td>&quot;http://payne.house.gov/rss.xml&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>&quot;P000604&quot;</td><td>&quot;02097&quot;</td><td>&quot;N00034639&quot;</td><td>null</td><td>&quot;H2NJ10154&quot;</td><td>&quot;65639&quot;</td><td>412506</td><td>&quot;90668&quot;</td><td>&quot;Donald Payne Jr.&quot;</td><td>null</td><td>31103</td><td>&quot;Donald Payne Jr.&quot;</td></tr><tr><td>&quot;Buck&quot;</td><td>&quot;Ken&quot;</td><td>null</td><td>null</td><td>null</td><td>&quot;Ken Buck&quot;</td><td>1959-02-16</td><td>&quot;M&quot;</td><td>&quot;rep&quot;</td><td>&quot;CO&quot;</td><td>4</td><td>null</td><td>&quot;Republican&quot;</td><td>&quot;https://buck.house.gov&quot;</td><td>&quot;2455 Rayburn House Office Buil…</td><td>&quot;202-225-4676&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>&quot;B001297&quot;</td><td>&quot;02233&quot;</td><td>&quot;N00030829&quot;</td><td>null</td><td>&quot;S0CO00237,H4CO04090&quot;</td><td>&quot;78285&quot;</td><td>412619</td><td>&quot;125319&quot;</td><td>&quot;Ken Buck&quot;</td><td>null</td><td>21510</td><td>&quot;Ken Buck&quot;</td></tr><tr><td>&quot;Gallagher&quot;</td><td>&quot;Mike&quot;</td><td>null</td><td>null</td><td>null</td><td>&quot;Mike Gallagher&quot;</td><td>1984-03-03</td><td>&quot;M&quot;</td><td>&quot;rep&quot;</td><td>&quot;WI&quot;</td><td>8</td><td>null</td><td>&quot;Republican&quot;</td><td>&quot;https://gallagher.house.gov&quot;</td><td>&quot;1211 Longworth House Office Bu…</td><td>&quot;202-225-5665&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>&quot;G000579&quot;</td><td>null</td><td>&quot;N00039330&quot;</td><td>null</td><td>&quot;H6WI08155&quot;</td><td>&quot;104067&quot;</td><td>412731</td><td>&quot;171843&quot;</td><td>&quot;Michael Gallagher (Wisconsin)&quot;</td><td>null</td><td>21720</td><td>&quot;Mike Gallagher (American polit…</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#52bada36 .cell execution_count=19}\n``` {.python .cell-code}\nmarg_df = dataset.filter(\n    pl.col(\"last_name\") == \"Smith\",\n    pl.col(\"gender\") == \"F\"\n)\nmarg_df\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 36)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>last_name</th><th>first_name</th><th>middle_name</th><th>suffix</th><th>nickname</th><th>full_name</th><th>birthday</th><th>gender</th><th>type</th><th>state</th><th>district</th><th>senate_class</th><th>party</th><th>url</th><th>address</th><th>phone</th><th>contact_form</th><th>rss_url</th><th>twitter</th><th>twitter_id</th><th>facebook</th><th>youtube</th><th>youtube_id</th><th>mastodon</th><th>bioguide_id</th><th>thomas_id</th><th>opensecrets_id</th><th>lis_id</th><th>fec_ids</th><th>cspan_id</th><th>govtrack_id</th><th>votesmart_id</th><th>ballotpedia_id</th><th>washington_post_id</th><th>icpsr_id</th><th>wikipedia_id</th></tr><tr><td>str</td><td>cat</td><td>str</td><td>str</td><td>str</td><td>str</td><td>date</td><td>cat</td><td>cat</td><td>cat</td><td>i64</td><td>i64</td><td>cat</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>i64</td><td>str</td><td>str</td><td>str</td><td>i64</td><td>str</td></tr></thead><tbody><tr><td>&quot;Smith&quot;</td><td>&quot;Margaret&quot;</td><td>&quot;Chase&quot;</td><td>null</td><td>null</td><td>null</td><td>1897-12-14</td><td>&quot;F&quot;</td><td>&quot;sen&quot;</td><td>&quot;ME&quot;</td><td>null</td><td>2</td><td>&quot;Republican&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>&quot;S000590&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>410070</td><td>null</td><td>null</td><td>null</td><td>8666</td><td>&quot;Margaret Chase Smith&quot;</td></tr><tr><td>&quot;Smith&quot;</td><td>&quot;Virginia&quot;</td><td>&quot;Dodd&quot;</td><td>null</td><td>null</td><td>null</td><td>1911-06-30</td><td>&quot;F&quot;</td><td>&quot;rep&quot;</td><td>&quot;NE&quot;</td><td>3</td><td>null</td><td>&quot;Republican&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>&quot;S000622&quot;</td><td>&quot;01084&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>410097</td><td>null</td><td>null</td><td>null</td><td>14276</td><td>&quot;Virginia D. Smith&quot;</td></tr><tr><td>&quot;Smith&quot;</td><td>&quot;Linda&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>1950-07-16</td><td>&quot;F&quot;</td><td>&quot;rep&quot;</td><td>&quot;WA&quot;</td><td>3</td><td>null</td><td>&quot;Republican&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>&quot;S000587&quot;</td><td>&quot;01078&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>410067</td><td>null</td><td>null</td><td>null</td><td>null</td><td>&quot;Linda Smith (American politici…</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#b583c15e .cell execution_count=20}\n``` {.python .cell-code}\nq = (\n    dataset.lazy()\n    .filter(pl.col(\"gender\") == \"F\")\n    .group_by(\"last_name\")\n    .agg(\n        pl.len(),\n        pl.col(\"gender\"),\n        pl.last(\"gender\").alias(\"foo\"),\n        pl.last(\"first_name\"),\n    )\n    .sort(\"len\", descending=True)\n    .limit(5)\n)\n\ndf_agg = q.collect()\nprint(df_agg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (5, 5)\n┌───────────┬─────┬─────────────────┬─────┬────────────┐\n│ last_name ┆ len ┆ gender          ┆ foo ┆ first_name │\n│ ---       ┆ --- ┆ ---             ┆ --- ┆ ---        │\n│ str       ┆ u32 ┆ list[cat]       ┆ cat ┆ cat        │\n╞═══════════╪═════╪═════════════════╪═════╪════════════╡\n│ Smith     ┆ 3   ┆ [\"F\", \"F\", \"F\"] ┆ F   ┆ Linda      │\n│ Douglas   ┆ 2   ┆ [\"F\", \"F\"]      ┆ F   ┆ Helen      │\n│ McCarthy  ┆ 2   ┆ [\"F\", \"F\"]      ┆ F   ┆ Carolyn    │\n│ Byron     ┆ 2   ┆ [\"F\", \"F\"]      ┆ F   ┆ Beverly    │\n│ Kelly     ┆ 2   ┆ [\"F\", \"F\"]      ┆ F   ┆ Sue        │\n└───────────┴─────┴─────────────────┴─────┴────────────┘\n```\n:::\n:::\n\n\n## Unique\n\n::: {#e54fa407 .cell execution_count=21}\n``` {.python .cell-code}\ndf_brodhead.select(\n    pl.col(\n    \"name\", \"type\")\n).unique(subset=[\"name\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>type</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;Cafe&quot;</td><td>&quot;cafe&quot;</td></tr><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;bar and grill&quot;</td></tr><tr><td>&quot;Tandoor&quot;</td><td>&quot;restaurant&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#18f8727f .cell execution_count=22}\n``` {.python .cell-code}\ndf_brodhead.glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 59\nColumns: 7\n$ name     <str> 'Devils Krafthouse', 'Devils Krafthouse', 'Devils Krafthouse', 'Devils Krafthouse', 'Devils Krafthouse', 'Devils Krafthouse', 'Devils Krafthouse', 'Devils Krafthouse', 'Devils Krafthouse', 'Devils Krafthouse'\n$ type     <str> 'bar and grill', 'bar and grill', 'bar and grill', 'bar and grill', 'bar and grill', 'bar and grill', 'bar and grill', 'bar and grill', 'bar and grill', 'bar and grill'\n$ menuType <str> 'appetizer', 'appetizer', 'appetizer', 'appetizer', 'appetizer', 'appetizer', 'appetizer', 'appetizer', 'entree', 'entree'\n$ itemType <str> 'snack', 'snack', 'snack', 'snack', 'snack', 'snack', 'snack', 'snack', 'sandwich', 'sandwich'\n$ itemName <str> 'sweet potato tots', 'french fries', 'quesadillas', 'southwest chili wings', 'chicken tenders', 'nachos', 'peel and eat shrimp', 'tortilla chips and salsa', 'turkey club double decker', 'fried chicken sandwich'\n$ cost     <i64> 4, 4, 6, 8, 7, 8, 9, 4, 9, 9\n$ rating   <i64> 8, 10, 5, 6, 7, 8, 5, 6, 5, 5\n\n```\n:::\n:::\n\n\n## Tips and Tricks\n\nhttps://www.youtube.com/watch?v=39jB8nJBrCI\n\n::: {#785bfe81 .cell execution_count=23}\n``` {.python .cell-code}\ndf_brodhead.select(\n    pl.col([\"name\", \"type\", \"itemName\", \"cost\"])\n    ).sort(\n    by=\"cost\", descending=True\n    ).filter(\n        pl.col(\"cost\") < 3\n    )\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (1, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>type</th><th>itemName</th><th>cost</th></tr><tr><td>str</td><td>str</td><td>str</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Tandoor&quot;</td><td>&quot;restaurant&quot;</td><td>&quot;naan&quot;</td><td>2</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#42d8ee72 .cell execution_count=24}\n``` {.python .cell-code}\ndf_brodhead.filter(\n    pl.col(\"cost\") == df_brodhead.select(pl.col(\"cost\")).min()\n).select(\n    pl.col([\"name\", \"itemName\", \"cost\"])\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (1, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>itemName</th><th>cost</th></tr><tr><td>str</td><td>str</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Tandoor&quot;</td><td>&quot;naan&quot;</td><td>2</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nWhich resturant has the most expensive items\n\n::: {#0bd0265d .cell execution_count=25}\n``` {.python .cell-code}\ndf_brodhead.filter(\n    pl.col(\"cost\") == df_brodhead.select(pl.col(\"cost\")).max()\n).select(pl.col(\n    [\"name\", \"itemName\", \"cost\"]\n))\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>itemName</th><th>cost</th></tr><tr><td>str</td><td>str</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Tandoor&quot;</td><td>&quot;lamb korma&quot;</td><td>12</td></tr><tr><td>&quot;Tandoor&quot;</td><td>&quot;beef bhunas&quot;</td><td>12</td></tr><tr><td>&quot;Tandoor&quot;</td><td>&quot;shrimp bhunas&quot;</td><td>12</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nAt the Brodhead Center, how many of the entrees (found in the menuType variable) cost eight dollars?\n\n::: {#fe34ca81 .cell execution_count=26}\n``` {.python .cell-code}\ndf_brodhead.filter(\n    pl.col(\"menuType\") == \"entree\",\n    pl.col(\"cost\") == 8\n).sort(\"rating\", descending=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (8, 7)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>type</th><th>menuType</th><th>itemType</th><th>itemName</th><th>cost</th><th>rating</th></tr><tr><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;bar and grill&quot;</td><td>&quot;entree&quot;</td><td>&quot;tacos&quot;</td><td>&quot;pork carnitas&quot;</td><td>8</td><td>8</td></tr><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;bar and grill&quot;</td><td>&quot;entree&quot;</td><td>&quot;sausage&quot;</td><td>&quot;bratwurst&quot;</td><td>8</td><td>7</td></tr><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;bar and grill&quot;</td><td>&quot;entree&quot;</td><td>&quot;tacos&quot;</td><td>&quot;ground beef&quot;</td><td>8</td><td>7</td></tr><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;bar and grill&quot;</td><td>&quot;entree&quot;</td><td>&quot;sandwich&quot;</td><td>&quot;grilled cheese&quot;</td><td>8</td><td>6</td></tr><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;bar and grill&quot;</td><td>&quot;entree&quot;</td><td>&quot;sausage&quot;</td><td>&quot;italian sausage&quot;</td><td>8</td><td>6</td></tr><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;bar and grill&quot;</td><td>&quot;entree&quot;</td><td>&quot;tacos&quot;</td><td>&quot;grilled chicken&quot;</td><td>8</td><td>6</td></tr><tr><td>&quot;Cafe&quot;</td><td>&quot;cafe&quot;</td><td>&quot;entree&quot;</td><td>&quot;sandwich&quot;</td><td>&quot;chicken pesto crepe&quot;</td><td>8</td><td>6</td></tr><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;bar and grill&quot;</td><td>&quot;entree&quot;</td><td>&quot;burger&quot;</td><td>&quot;devil&#x27;s classic&quot;</td><td>8</td><td>5</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nThe head of Duke dining is considering reducing prices at the Brodhead Center. Using what we’ve learned in class, write code that will calculate a new variable (halfPrice) that contains items at half price.\n\n::: {#f285e0b8 .cell execution_count=27}\n``` {.python .cell-code}\ndf_brodhead.with_columns(\n    (pl.col(\"cost\") * 0.5).alias(\"half_price\")\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (59, 8)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>type</th><th>menuType</th><th>itemType</th><th>itemName</th><th>cost</th><th>rating</th><th>half_price</th></tr><tr><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>i64</td><td>i64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;bar and grill&quot;</td><td>&quot;appetizer&quot;</td><td>&quot;snack&quot;</td><td>&quot;sweet potato tots&quot;</td><td>4</td><td>8</td><td>2.0</td></tr><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;bar and grill&quot;</td><td>&quot;appetizer&quot;</td><td>&quot;snack&quot;</td><td>&quot;french fries&quot;</td><td>4</td><td>10</td><td>2.0</td></tr><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;bar and grill&quot;</td><td>&quot;appetizer&quot;</td><td>&quot;snack&quot;</td><td>&quot;quesadillas&quot;</td><td>6</td><td>5</td><td>3.0</td></tr><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;bar and grill&quot;</td><td>&quot;appetizer&quot;</td><td>&quot;snack&quot;</td><td>&quot;southwest chili wings&quot;</td><td>8</td><td>6</td><td>4.0</td></tr><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;bar and grill&quot;</td><td>&quot;appetizer&quot;</td><td>&quot;snack&quot;</td><td>&quot;chicken tenders&quot;</td><td>7</td><td>7</td><td>3.5</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Cafe&quot;</td><td>&quot;cafe&quot;</td><td>&quot;entree&quot;</td><td>&quot;sandwich&quot;</td><td>&quot;apple and brie crepe&quot;</td><td>7</td><td>9</td><td>3.5</td></tr><tr><td>&quot;Cafe&quot;</td><td>&quot;cafe&quot;</td><td>&quot;dessert&quot;</td><td>&quot;dessert&quot;</td><td>&quot;cinnamon sugar&quot;</td><td>5</td><td>9</td><td>2.5</td></tr><tr><td>&quot;Cafe&quot;</td><td>&quot;cafe&quot;</td><td>&quot;dessert&quot;</td><td>&quot;dessert&quot;</td><td>&quot;nutella&quot;</td><td>6</td><td>8</td><td>3.0</td></tr><tr><td>&quot;Cafe&quot;</td><td>&quot;cafe&quot;</td><td>&quot;dessert&quot;</td><td>&quot;dessert&quot;</td><td>&quot;banana foster&quot;</td><td>6</td><td>7</td><td>3.0</td></tr><tr><td>&quot;Cafe&quot;</td><td>&quot;cafe&quot;</td><td>&quot;dessert&quot;</td><td>&quot;dessert&quot;</td><td>&quot;crepe suzette&quot;</td><td>6</td><td>8</td><td>3.0</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nwith the above code chunk, cast half_price as an integer\n\n::: {#59caa71a .cell execution_count=28}\n``` {.python .cell-code}\ndf_brodhead.with_columns(\n    (pl.col(\"cost\") * 0.5).alias(\"half_price\").cast(pl.Int64)\n).head(4)\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (4, 8)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>type</th><th>menuType</th><th>itemType</th><th>itemName</th><th>cost</th><th>rating</th><th>half_price</th></tr><tr><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>i64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;bar and grill&quot;</td><td>&quot;appetizer&quot;</td><td>&quot;snack&quot;</td><td>&quot;sweet potato tots&quot;</td><td>4</td><td>8</td><td>2</td></tr><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;bar and grill&quot;</td><td>&quot;appetizer&quot;</td><td>&quot;snack&quot;</td><td>&quot;french fries&quot;</td><td>4</td><td>10</td><td>2</td></tr><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;bar and grill&quot;</td><td>&quot;appetizer&quot;</td><td>&quot;snack&quot;</td><td>&quot;quesadillas&quot;</td><td>6</td><td>5</td><td>3</td></tr><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;bar and grill&quot;</td><td>&quot;appetizer&quot;</td><td>&quot;snack&quot;</td><td>&quot;southwest chili wings&quot;</td><td>8</td><td>6</td><td>4</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nHow many entrees are in the dataset (menuType variable)? How many desserts\n\n::: {#7b16532f .cell execution_count=29}\n``` {.python .cell-code}\ndf_brodhead['menuType'].value_counts().sort(\"count\", descending=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (4, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>menuType</th><th>count</th></tr><tr><td>str</td><td>u32</td></tr></thead><tbody><tr><td>&quot;entree&quot;</td><td>24</td></tr><tr><td>&quot;appetizer&quot;</td><td>23</td></tr><tr><td>&quot;dessert&quot;</td><td>7</td></tr><tr><td>&quot;side&quot;</td><td>5</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#45b5a905 .cell execution_count=30}\n``` {.python .cell-code}\ndf_brodhead.groupby(\n    ['menuType', 'itemType']\n    ).agg(\n        pl.count()\n    ).sort(\"count\", descending = True).head(8)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\jrl\\AppData\\Local\\Temp\\ipykernel_19972\\4269465637.py:1: DeprecationWarning: `groupby` is deprecated. It has been renamed to `group_by`.\n  df_brodhead.groupby(\nC:\\Users\\jrl\\AppData\\Local\\Temp\\ipykernel_19972\\4269465637.py:4: DeprecationWarning: `pl.count()` is deprecated. Please use `pl.len()` instead.\n  pl.count()\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (8, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>menuType</th><th>itemType</th><th>count</th></tr><tr><td>str</td><td>str</td><td>u32</td></tr></thead><tbody><tr><td>&quot;appetizer&quot;</td><td>&quot;appetizer&quot;</td><td>9</td></tr><tr><td>&quot;appetizer&quot;</td><td>&quot;snack&quot;</td><td>8</td></tr><tr><td>&quot;entree&quot;</td><td>&quot;sandwich&quot;</td><td>8</td></tr><tr><td>&quot;dessert&quot;</td><td>&quot;dessert&quot;</td><td>7</td></tr><tr><td>&quot;appetizer&quot;</td><td>&quot;bread&quot;</td><td>6</td></tr><tr><td>&quot;entree&quot;</td><td>&quot;burger&quot;</td><td>5</td></tr><tr><td>&quot;entree&quot;</td><td>&quot;tacos&quot;</td><td>4</td></tr><tr><td>&quot;entree&quot;</td><td>&quot;sausage&quot;</td><td>3</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#e20d6d50 .cell execution_count=31}\n``` {.python .cell-code}\ndf_brodhead.groupby(\n    ['menuType', 'itemType']\n    ).agg(\n        pl.count()\n    ).sort([\"menuType\", \"itemType\"]).head(8)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\jrl\\AppData\\Local\\Temp\\ipykernel_19972\\209293554.py:1: DeprecationWarning: `groupby` is deprecated. It has been renamed to `group_by`.\n  df_brodhead.groupby(\nC:\\Users\\jrl\\AppData\\Local\\Temp\\ipykernel_19972\\209293554.py:4: DeprecationWarning: `pl.count()` is deprecated. Please use `pl.len()` instead.\n  pl.count()\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=31}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (8, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>menuType</th><th>itemType</th><th>count</th></tr><tr><td>str</td><td>str</td><td>u32</td></tr></thead><tbody><tr><td>&quot;appetizer&quot;</td><td>&quot;appetizer&quot;</td><td>9</td></tr><tr><td>&quot;appetizer&quot;</td><td>&quot;bread&quot;</td><td>6</td></tr><tr><td>&quot;appetizer&quot;</td><td>&quot;snack&quot;</td><td>8</td></tr><tr><td>&quot;dessert&quot;</td><td>&quot;dessert&quot;</td><td>7</td></tr><tr><td>&quot;entree&quot;</td><td>&quot;beef&quot;</td><td>1</td></tr><tr><td>&quot;entree&quot;</td><td>&quot;burger&quot;</td><td>5</td></tr><tr><td>&quot;entree&quot;</td><td>&quot;chicken&quot;</td><td>1</td></tr><tr><td>&quot;entree&quot;</td><td>&quot;lamb&quot;</td><td>1</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#44c9852a .cell execution_count=32}\n``` {.python .cell-code}\n# brodhead |>  group_by(name) |> summarize(mean(cost), mean(rating))\n\ndf_brodhead.groupby(\"name\",\"menuType\").agg([\n        pl.col(\"cost\").mean().round(1).alias(\"mean_cost\"),\n        pl.col(\"rating\").mean().round(1).alias(\"mean_rating\")\n    ]).sort(\"mean_cost\", descending=True)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\jrl\\AppData\\Local\\Temp\\ipykernel_19972\\1434352665.py:3: DeprecationWarning: `groupby` is deprecated. It has been renamed to `group_by`.\n  df_brodhead.groupby(\"name\",\"menuType\").agg([\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (8, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>menuType</th><th>mean_cost</th><th>mean_rating</th></tr><tr><td>str</td><td>str</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;Tandoor&quot;</td><td>&quot;entree&quot;</td><td>11.5</td><td>6.5</td></tr><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;entree&quot;</td><td>8.6</td><td>6.2</td></tr><tr><td>&quot;Cafe&quot;</td><td>&quot;entree&quot;</td><td>7.3</td><td>7.5</td></tr><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;dessert&quot;</td><td>6.7</td><td>9.0</td></tr><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;side&quot;</td><td>6.6</td><td>6.4</td></tr><tr><td>&quot;Devils Krafthouse&quot;</td><td>&quot;appetizer&quot;</td><td>6.3</td><td>6.9</td></tr><tr><td>&quot;Cafe&quot;</td><td>&quot;dessert&quot;</td><td>5.8</td><td>8.0</td></tr><tr><td>&quot;Tandoor&quot;</td><td>&quot;appetizer&quot;</td><td>4.9</td><td>8.0</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n## datasets\n\n::: {#42d17d75 .cell execution_count=33}\n``` {.python .cell-code}\nfrom vega_datasets import data\n```\n:::\n\n\n::: {#c9179d45 .cell execution_count=34}\n``` {.python .cell-code}\niris_df = data.iris()\niris_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sepalLength</th>\n      <th>sepalWidth</th>\n      <th>petalLength</th>\n      <th>petalWidth</th>\n      <th>species</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>5.1</td>\n      <td>3.5</td>\n      <td>1.4</td>\n      <td>0.2</td>\n      <td>setosa</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4.9</td>\n      <td>3.0</td>\n      <td>1.4</td>\n      <td>0.2</td>\n      <td>setosa</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4.7</td>\n      <td>3.2</td>\n      <td>1.3</td>\n      <td>0.2</td>\n      <td>setosa</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4.6</td>\n      <td>3.1</td>\n      <td>1.5</td>\n      <td>0.2</td>\n      <td>setosa</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5.0</td>\n      <td>3.6</td>\n      <td>1.4</td>\n      <td>0.2</td>\n      <td>setosa</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#aebce53d .cell execution_count=35}\n``` {.python .cell-code}\ndata.cars()\ncars_df = data.cars()\npl.from_pandas(cars_df).head()\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 9)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>Name</th><th>Miles_per_Gallon</th><th>Cylinders</th><th>Displacement</th><th>Horsepower</th><th>Weight_in_lbs</th><th>Acceleration</th><th>Year</th><th>Origin</th></tr><tr><td>str</td><td>f64</td><td>i64</td><td>f64</td><td>f64</td><td>i64</td><td>f64</td><td>datetime[ns]</td><td>str</td></tr></thead><tbody><tr><td>&quot;chevrolet chevelle malibu&quot;</td><td>18.0</td><td>8</td><td>307.0</td><td>130.0</td><td>3504</td><td>12.0</td><td>1970-01-01 00:00:00</td><td>&quot;USA&quot;</td></tr><tr><td>&quot;buick skylark 320&quot;</td><td>15.0</td><td>8</td><td>350.0</td><td>165.0</td><td>3693</td><td>11.5</td><td>1970-01-01 00:00:00</td><td>&quot;USA&quot;</td></tr><tr><td>&quot;plymouth satellite&quot;</td><td>18.0</td><td>8</td><td>318.0</td><td>150.0</td><td>3436</td><td>11.0</td><td>1970-01-01 00:00:00</td><td>&quot;USA&quot;</td></tr><tr><td>&quot;amc rebel sst&quot;</td><td>16.0</td><td>8</td><td>304.0</td><td>150.0</td><td>3433</td><td>12.0</td><td>1970-01-01 00:00:00</td><td>&quot;USA&quot;</td></tr><tr><td>&quot;ford torino&quot;</td><td>17.0</td><td>8</td><td>302.0</td><td>140.0</td><td>3449</td><td>10.5</td><td>1970-01-01 00:00:00</td><td>&quot;USA&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#f9e069f8 .cell execution_count=36}\n``` {.python .cell-code}\ndata.list_datasets()\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\n['7zip',\n 'airports',\n 'annual-precip',\n 'anscombe',\n 'barley',\n 'birdstrikes',\n 'budget',\n 'budgets',\n 'burtin',\n 'cars',\n 'climate',\n 'co2-concentration',\n 'countries',\n 'crimea',\n 'disasters',\n 'driving',\n 'earthquakes',\n 'ffox',\n 'flare',\n 'flare-dependencies',\n 'flights-10k',\n 'flights-200k',\n 'flights-20k',\n 'flights-2k',\n 'flights-3m',\n 'flights-5k',\n 'flights-airport',\n 'gapminder',\n 'gapminder-health-income',\n 'gimp',\n 'github',\n 'graticule',\n 'income',\n 'iowa-electricity',\n 'iris',\n 'jobs',\n 'la-riots',\n 'londonBoroughs',\n 'londonCentroids',\n 'londonTubeLines',\n 'lookup_groups',\n 'lookup_people',\n 'miserables',\n 'monarchs',\n 'movies',\n 'normal-2d',\n 'obesity',\n 'ohlc',\n 'points',\n 'population',\n 'population_engineers_hurricanes',\n 'seattle-temps',\n 'seattle-weather',\n 'sf-temps',\n 'sp500',\n 'stocks',\n 'udistrict',\n 'unemployment',\n 'unemployment-across-industries',\n 'uniform-2d',\n 'us-10m',\n 'us-employment',\n 'us-state-capitals',\n 'volcano',\n 'weather',\n 'weball26',\n 'wheat',\n 'windvectors',\n 'world-110m',\n 'zipcodes']\n```\n:::\n:::\n\n\n",
    "supporting": [
      "polars_why-and-cheatsheet-demo_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}